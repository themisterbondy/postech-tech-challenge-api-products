name: Deploy Pipeline with Docker and Kubernetes

on:
  pull_request:
    branches:
      - main
    types: [closed]
  workflow_dispatch:

permissions:
  packages: write
  contents: read
  id-token: write

env:
  # Configura√ß√µes do Projeto
  SOLUTION_FILE: 'Postech.Fiap.Products.sln'
  TEST_PROJECT: 'test/Postech.Fiap.Products.WebApi.UnitTest'
  DOCKERFILE_PATH: 'src/Postech.Fiap.Products.WebApi/Dockerfile'
  DOCKER_IMAGE_NAME: 'myfood-products-api'
  COVERAGE_FILE: 'coverage.xml'

  # Configura√ß√µes do SonarCloud
  SONAR_PROJECT_KEY: 'themisterbondy_postech-tech-challenge-api-products'
  SONAR_ORG: 'themisterbondy'
  SONAR_HOST_URL: 'https://sonarcloud.io'
  SONAR_POLLING_TIMEOUT: 600

  # Configura√ß√µes do Docker
  DOCKER_REGISTRY: '${{ secrets.DOCKER_USERNAME }}'
  DOCKER_IMAGE_TAG: '${{ github.sha }}'

  # Configura√ß√µes do Kubernetes
  RESOURCE_GROUP: 'rg-postech-fiap-k8s'
  CLUSTER_NAME: 'postech-fiap-k8s-cluster'
  K8S_NAMESPACE: 'myfood-namespace'
  HELM_CHART_PATH: './charts/webapi/'

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: üõéÔ∏è Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Instalar .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: üì• Instalar SonarScanner e dotnet-coverage
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-coverage
          export PATH="$PATH:$HOME/.dotnet/tools"

      - name: üöÄ Restaurar depend√™ncias
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: üî® Compilar solu√ß√£o
        run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore

      - name: üß™ Rodar testes com cobertura e an√°lise SonarCloud
        run: |
          dotnet sonarscanner begin \
            /k:"${{ env.SONAR_PROJECT_KEY }}" \
            /o:"${{ env.SONAR_ORG }}" \
            /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.vscoveragexml.reportsPaths="${{ env.COVERAGE_FILE }}"

          dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore

          dotnet-coverage collect "dotnet test ${{ env.TEST_PROJECT }} --configuration Release --no-restore" \
            -f xml -o "${{ env.COVERAGE_FILE }}"

          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: üö¶ Verificar Quality Gate no SonarCloud
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: ${{ env.SONAR_POLLING_TIMEOUT }}
          scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

      - name: ‚úÖ Verificar se a Quality Gate passou
        if: steps.sonarqube-quality-gate-check.outputs.quality-gate-status != 'PASSED'
        run: |
          echo "‚ùå Quality Gate falhou! Corrija os problemas antes de fazer o deploy."
          exit 1

      - name: üê≥ Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üèóÔ∏è Build e Push da Imagem Docker
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.repository }}

      - name: üîê Autenticar com o Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üì• Obter Configura√ß√£o do Kubernetes
        run: |
          az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --overwrite-existing

      - name: üì¶ Instalar o Helm
        uses: azure/setup-helm@v3

      - name: üöÄ Deploy da API no Kubernetes
        run: |
          helm upgrade --install ${{ env.DOCKER_IMAGE_NAME }} ${{ env.HELM_CHART_PATH }} \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --set image.repository=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }} \
            --set image.tag=${{ env.DOCKER_IMAGE_TAG }} \
            --create-namespace