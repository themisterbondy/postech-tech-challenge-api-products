name: CI - Build, Test, SonarCloud

on:
  push:
    branches:
      - 'feature/**'
      - 'develop'
      - 'main'

permissions:
  contents: read

env:

  # Configurações do Projeto
  SOLUTION_FILE: 'Postech.Fiap.Products.sln'
  TEST_PROJECT: 'test/Postech.Fiap.Products.WebApi.UnitTest'
  SONAR_PROJECT_KEY: 'themisterbondy_postech-tech-challenge-api-products'

  # Configurações do SonarCloud
  DOTNET_VERSION: '9.0.x'
  SONAR_ORG: 'themisterbondy'
  SONAR_HOST_URL: 'https://sonarcloud.io'
  COVERAGE_FILE: 'coverage.xml'


jobs:
  build-and-test:
    name: Build, Test & SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Instalar .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📥 Instalar SonarScanner e dotnet-coverage
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-coverage

      - name: 🔧 Configurar PATH para Ferramentas Globais
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: 🚀 Restaurar dependências
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: 🧹 Limpar build anterior
        run: dotnet clean ${{ env.SOLUTION_FILE }}

      - name: 🔨 Compilar solução
        run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore

      - name: 🧪 Rodar testes com cobertura e análise SonarCloud
        run: |
          # Instala o Coverlet Collector no projeto de testes
          dotnet add ${{ env.TEST_PROJECT }} package coverlet.collector
          
          # Inicia a análise do SonarCloud
          dotnet sonarscanner begin \
            /k:"${{ env.SONAR_PROJECT_KEY }}" \
            /o:"${{ env.SONAR_ORG }}" \
            /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.cobertura.xml" \
            /d:sonar.analysis.cache.enabled=false \
            /d:sonar.scanner.scanAll=false
          
          # Build do projeto
          dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore --no-incremental
          
          # Execução dos testes com coleta de cobertura no formato Cobertura
          dotnet test ${{ env.TEST_PROJECT }} \
            --configuration Release \
            --no-restore \
            --collect:"XPlat Code Coverage"
          
          # Finaliza a análise do SonarCloud
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: 🚦 Verificar Quality Gate no SonarCloud
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
          scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}